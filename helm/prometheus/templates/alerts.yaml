# Copyright 2025 SAP SE
# SPDX-License-Identifier: Apache-2.0

apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: cortex-alerts
  labels:
    type: alerting-rules
    prometheus: {{ .Values.global.prometheus }}
{{- with .Values.alerts.labels }}
spec:
  groups:
  - name: cortex-alerts
    rules:
    - alert: CortexDown
      expr: up{github_org="cobaltcore-dev",github_repo="cortex"} == 0
      for: 1m
      labels:
        context: liveness
        {{- if .global }}{{ .global | toYaml | nindent 8 }}{{- end }}
        {{- if .cortexDown }}{{ .cortexDown | toYaml | nindent 8 }}{{- end }}
      annotations:
        summary: "Cortex service is down"
        description: >
          The Cortex service is down. Initial placement requests from Nova will
          not be served. This is no immediate problem, since Nova will continue
          placing new VMs. However, the placement will be less desirable.

    - alert: CortexHttpRequest400sTooHigh
      expr: rate(cortex_scheduler_api_request_duration_seconds_count{status=~"4.+"}[5m]) > 0.1
      for: 5m
      labels:
        context: api
        {{- if .global }}{{ .global | toYaml | nindent 8 }}{{- end }}
        {{- if .cortexHttpRequest400sTooHigh }}{{ .cortexHttpRequest400sTooHigh | toYaml | nindent 8 }}{{- end }}
      annotations:
        summary: "HTTP request 400 errors too high"
        description: >
          Cortex is responding to Nova initial placement requests with HTTP 4xx
          errors. This is expected when the scheduling request cannot be served
          by Cortex. However, it could also indicate that the Nova request
          format has changed and Cortex is unable to parse it.

    - alert: CortexHttpRequest500sTooHigh
      expr: rate(cortex_scheduler_api_request_duration_seconds_count{status=~"5.+"}[5m]) > 0.1
      for: 5m
      labels:
        context: api
        {{- if .global }}{{ .global | toYaml | nindent 8 }}{{- end }}
        {{- if .cortexHttpRequest500sTooHigh }}{{ .cortexHttpRequest500sTooHigh | toYaml | nindent 8 }}{{- end }}
      annotations:
        summary: "HTTP request 500 errors too high"
        description: >
          Cortex is responding to Nova initial placement requests with HTTP 5xx
          errors. This is not expected and indicates that Cortex is having some
          internal problem. Nova will continue to place new VMs, but the
          placement will be less desirable. Thus, no immediate action is needed.

    - alert: CortexHighMemoryUsage
      expr: process_resident_memory_bytes{github_org="cobaltcore-dev",github_repo="cortex"} > 100 * 1024 * 1024
      for: 5m
      labels:
        context: memory
        {{- if .global }}{{ .global | toYaml | nindent 8 }}{{- end }}
        {{- if .cortexHighMemoryUsage }}{{ .cortexHighMemoryUsage | toYaml | nindent 8 }}{{- end }}
      annotations:
        summary: "High memory usage"
        description: >
          Cortex should not be using more than 100 MiB of memory. Usually it
          should use much less, so there may be a memory leak or other changes
          that are causing the memory usage to increase significantly.

    - alert: CortexHighCPUUsage
      expr: rate(process_cpu_seconds_total{github_org="cobaltcore-dev",github_repo="cortex"}[1m]) > 0.5
      for: 5m
      labels:
        context: cpu
        {{- if .global }}{{ .global | toYaml | nindent 8 }}{{- end }}
        {{- if .cortexHighCPUUsage }}{{ .cortexHighCPUUsage | toYaml | nindent 8 }}{{- end }}
      annotations:
        summary: "High CPU usage"
        description: >
          Cortex should not be using more than 50% of a single CPU core. Usually
          it should use much less, so there may be a CPU leak or other changes
          that are causing the CPU usage to increase significantly.

    - alert: CortexLongSchedulerPipelineRun
      expr: histogram_quantile(0.99, rate(cortex_scheduler_pipeline_run_duration_seconds_bucket[5m])) > 1
      for: 5m
      labels:
        context: pipeline
        {{- if .global }}{{ .global | toYaml | nindent 8 }}{{- end }}
        {{- if .cortexLongPipelineRun }}{{ .cortexLongPipelineRun | toYaml | nindent 8 }}{{- end }}
      annotations:
        summary: "Pipeline run duration too long"
        description: >
          Cortex is expected to return a response to Nova initial placement
          requests within 1 second. If the response takes longer, it indicates
          that Cortex is no longer able to serve the requests in a timely manner.
          No immediate action is needed, since Nova sets its own timeout and
          will fallback to its own, less desirable placement.

    - alert: CortexSyncNotSuccessful
      expr: cortex_sync_request_processed_total - cortex_sync_request_duration_seconds_count > 0
      for: 5m
      labels:
        context: syncstatus
        {{- if .global }}{{ .global | toYaml | nindent 8 }}{{- end }}
        {{- if .cortexSyncNotSuccessful }}{{ .cortexSyncNotSuccessful | toYaml | nindent 8 }}{{- end }}
      annotations:
        summary: "Sync not successful"
        description: >
          Cortex experienced an issue syncing data from a datasource. This may
          happen when the datasource (OpenStack, Prometheus, etc.) is down or
          the sync module is misconfigured. No immediate action is needed, since
          the sync module will retry the sync operation and the currently synced
          data will be kept. However, when this problem persists for a longer
          time the service will have a less recent view of the datacenter.

    - alert: CortexSyncObjectsDroppedToZero
      expr: cortex_sync_objects == 0
      for: 5m
      labels:
        context: syncobjects
        {{- if .global }}{{ .global | toYaml | nindent 8 }}{{- end }}
        {{- if .cortexSyncObjectsDroppedToZero }}{{ .cortexSyncObjectsDroppedToZero | toYaml | nindent 8 }}{{- end }}
      annotations:
        summary: "Sync objects dropped to zero"
        description: >
          Cortex is not syncing any objects from a datasource. This may happen
          when the datasource (OpenStack, Prometheus, etc.) is down or the sync
          module is misconfigured. No immediate action is needed, since the sync
          module will retry the sync operation and the currently synced data will
          be kept. However, when this problem persists for a longer time the
          service will have a less recent view of the datacenter.

    - alert: CortexSyncObjectsTooHigh
      expr: cortex_sync_objects > 1000000
      for: 5m
      labels:
        context: syncobjects
        {{- if .global }}{{ .global | toYaml | nindent 8 }}{{- end }}
        {{- if .cortexSyncObjectsTooHigh }}{{ .cortexSyncObjectsTooHigh | toYaml | nindent 8 }}{{- end }}
      annotations:
        summary: "Sync objects too high"
        description: >
          Cortex is syncing more than 1 million objects from a datasource. This
          may happen when the datasource (OpenStack, Prometheus, etc.) returns
          unexpectedly many objects, or when the database cannot drop old objects.
          No immediate action is needed, but should this condition persist for a
          longer time, the database may fill up and crash.
{{- end }}