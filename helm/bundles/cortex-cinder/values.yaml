# Copyright 2025 SAP SE
# SPDX-License-Identifier: Apache-2.0

owner-info:
  enabled: true
  helm-chart-url: "https://github.com/cobaltcore-dev/cortex/helm/bundles/cortex-cinder"
  maintainers:
    - "p.matthes@sap.com"
    - "markus.wieland@sap.com"
    - "arno.uhlig@sap.com"
  support-group: "workload-management"
  service: "cortex-cinder"

alerts:
  enabled: true
  prometheus: openstack

# Values accessible to all subcharts.
global:
  # Values passed to the service through a configmap.
  conf:
    # MQTT broker connection parameters.
    mqtt:
      # Must match rabbitmq settings from the cortex-mqtt chart.
      url: "tcp://cortex-cinder-mqtt:1883"

    # Connection parameters for the database where data is stored.
    db:
      # Must match postgresql settings from the cortex-postgres chart.
      host: cortex-cinder-postgresql

# Custom configuration for the cortex postgres chart.
cortex-postgres:
  fullnameOverride: cortex-cinder-postgresql

# Custom configuration for the cortex mqtt chart.
cortex-mqtt:
  fullnameOverride: cortex-cinder-mqtt

# Custom configuration for the cortex core chart.
cortex-alerts:
  fullnameOverride: cortex-cinder
  alerts:
    componentPrefix: cortex-cinder

cortex-kpis:
  fullnameOverride: cortex-cinder-kpis
  service:
    extraLabels:
      app: cortex-cinder-kpis # See below, used for the service monitor.
  serviceMonitor:
    matchLabels: # See above, this is used to select the postgresql service.
      app: cortex-cinder-kpis
  args: []
  conf:
    kpis:
      # Configuration of KPIs that should be extracted from the synced data.
      # Each KPI can specify its own dependencies on other extractors and
      # synced data.
      #
      # The `name` should correspond to a known KPI extractor plugin.
      plugins: []

cortex-cinder:
  conf:
    datasources:
      prometheus:
        # Prometheus metrics to sync into the database.
        # Each metric can be synced from a different Prometheus instance.
        # The `type` parameter should map to a known metric model in the database.
        metrics:
          # NetApp harvest exporter metrics for Cinder storage pools.
        - alias: netapp_aggr_labels
          query: netapp_aggr_labels
          type: netapp_aggregate_labels_metric
        - alias: netapp_node_cpu_busy
          query: netapp_node_cpu_busy
          type: netapp_node_metric
        - alias: netapp_volume_aggr_labels
          query: netapp_volume_aggr_labels
          type: netapp_volume_aggregate_labels_metric

      openstack:
        cinder:
          # One of admin, public, or internal
          availability: public
          types:
            - storage_pools

    extractor:
      # Configuration of features that should be extracted from the synced data.
      # Each extractor can specify its own dependencies on other extractors or
      # synced data.
      #
      # The `name` should correspond to a known feature extractor plugin.
      # Note that the order defined here will also be the order in which the
      # extractors are executed. If possible, extractors whose dependencies have
      # been executed will be executed in parallel to speed up the process.
      plugins:
        # NetApp-specific extractors.
        - name: netapp_storage_pool_cpu_usage_extractor
          recencySeconds: 60 # 1 minute
          dependencies:
            datasources:
              prometheus:
                metrics:
                  - alias: netapp_node_cpu_busy
                  - alias: netapp_aggr_labels

cortex-scheduler:
  fullnameOverride: cortex-cinder-scheduler
  service:
    extraLabels:
      app: cortex-cinder-scheduler # See below, used for the service monitor.
  serviceMonitor:
    matchLabels: # See above, this is used to select the postgresql service.
      app: cortex-cinder-scheduler
  args: ["scheduler-cinder"]
  conf:
    scheduler:
      cinder:
        pipelines:
          # Note: there needs to be at least one pipeline with the name "default".
          - name: default
            # Configuration of scheduler steps that modify the Cinder scheduler weights.
            # Each scheduler step can specify its own dependencies on extractors and
            # synced data.
            #
            # The `name` should correspond to a known scheduler plugin.
            plugins: []
