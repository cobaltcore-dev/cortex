---
apiVersion: scheduling.cortex/v1alpha1
kind: Step
metadata:
  name: vmware-hana-binpacking
spec:
  operator: cortex-nova
  type: weigher
  impl: shared_resource_balancing
  description: |
    This step pulls HANA VMs onto the smallest possible gaps on HANA-exclusive
    VMware hosts. In this way hosts with much free space are held free for
    larger HANA VMs, improving overall packing efficiency for HANA workloads.
  knowledges:
    - name: host-utilization
  opts:
    scope:
      hostSelectors:
        # Note: due to the vmware spec selector, it is expected that
        # this step is only executed for VMware hosts.
        - subject: trait
          type: infix
          value: "HANA_EXCLUSIVE"
          operation: intersection
      specSelectors:
        - subject: flavor
          type: infix
          value: "hana"
          action: continue
        - subject: vmware
          type: bool
          value: true
          action: continue
    # In this configuration, we only consider the memory usage
    # after the flavor has been placed.
    ramAfterEnabled: true
    ramUtilizedAfterLowerBoundPct: 0
    ramUtilizedAfterUpperBoundPct: 100
    ramUtilizedAfterActivationLowerBound: 0.0
    ramUtilizedAfterActivationUpperBound: 1.0
---
apiVersion: scheduling.cortex/v1alpha1
kind: Step
metadata:
  name: vmware-general-purpose-balancing
spec:
  operator: cortex-nova
  type: weigher
  impl: shared_resource_balancing
  description: |
    This step balances non-HANA VMs across non-HANA exclusive VMware hosts. It
    pulls vms onto the freeest hosts possible to ensure an even distribution of
    workloads across the available infrastructure.
  knowledges:
    - name: host-utilization
  opts:
    scope:
      hostSelectors:
        # Note: due to the vmware spec selector, it is expected that
        # this step is only executed for VMware hosts. However,
        # we don't want to balance on HANA exclusive hosts.
        - subject: trait
          type: infix
          value: "HANA_EXCLUSIVE"
          operation: difference
      specSelectors:
        # Don't balance HANA vms.
        - subject: flavor
          type: infix
          value: "hana"
          action: skip
        - subject: vmware
          type: bool
          value: true
          action: continue
    # In this configuration, we only consider the memory usage.
    ramEnabled: true
    ramUtilizedLowerBoundPct: 0
    ramUtilizedUpperBoundPct: 100
    ramUtilizedActivationLowerBound: 1.0
    ramUtilizedActivationUpperBound: 0.0
---
apiVersion: scheduling.cortex/v1alpha1
kind: Step
metadata:
  name: vmware-avoid-long-term-contended-hosts
spec:
  operator: cortex-nova
  type: weigher
  impl: vmware_avoid_long_term_contended_hosts
  description: |
    This step avoids placing vms on vmware hosts with a high CPU contention over
    a longer period of time, based on vrops contention metrics. In particular,
    this step looks at a longer time window of 4 weeks to identify hosts that
    are consistently contended.
  knowledges:
    - name: vmware-long-term-contended-hosts
  opts:
    scope:
      specSelectors:
        - subject: vmware
          type: bool
          value: true
          action: continue
    avgCPUContentionLowerBound: 0 # pct
    avgCPUContentionUpperBound: 10 # pct
    avgCPUContentionActivationLowerBound: 0.0
    avgCPUContentionActivationUpperBound: -0.75
    maxCPUContentionLowerBound: 0 # pct
    maxCPUContentionUpperBound: 10 # pct
    maxCPUContentionActivationLowerBound: 0.0
    maxCPUContentionActivationUpperBound: -0.25
---
apiVersion: scheduling.cortex/v1alpha1
kind: Step
metadata:
  name: vmware-avoid-short-term-contended-hosts
spec:
  operator: cortex-nova
  type: weigher
  impl: vmware_avoid_short_term_contended_hosts
  description: |
    This step avoids placing vms on vmware hosts with a high CPU contention over
    a shorter period of time, based on vrops contention metrics. In particular,
    this step looks at a shorter time window of 20 minutes to identify hosts that
    are currently contended.
  knowledges:
    - name: vmware-short-term-contended-hosts
  opts:
    scope:
      specSelectors:
        - subject: vmware
          type: bool
          value: true
          action: continue
    avgCPUContentionLowerBound: 0 # pct
    avgCPUContentionUpperBound: 10 # pct
    avgCPUContentionActivationLowerBound: 0.0
    avgCPUContentionActivationUpperBound: -0.75
    maxCPUContentionLowerBound: 0 # pct
    maxCPUContentionUpperBound: 10 # pct
    maxCPUContentionActivationLowerBound: 0.0
    maxCPUContentionActivationUpperBound: -0.25
---
apiVersion: scheduling.cortex/v1alpha1
kind: Step
metadata:
  name: filter-host-instructions
spec:
  operator: cortex-nova
  type: filter
  impl: filter_host_instructions
  description: |
    This step will consider the `ignore_hosts` and `force_hosts` instructions
    from the nova scheduler request spec to filter out or exclusively allow
    certain hosts.
  knowledges: []
---
apiVersion: scheduling.cortex/v1alpha1
kind: Step
metadata:
  name: filter-has-enough-capacity
spec:
  operator: cortex-nova
  type: filter
  impl: filter_has_enough_capacity
  description: |
    This step will filter out hosts that do not have enough available capacity
    to host the requested flavor. If enabled, this step will subtract the
    current reservations residing on this host from the available capacity.
  knowledges:
    # TODO: Remove this dependency since this is a filter which should
    # not depend on a potentially non-recent knowledge.
    # This should be changed to use the hypervisor CRD.
    - name: host-utilization
  opts:
    # If reserved space should be locked even for matching requests.
    # For the reservations pipeline, we don't want to unlock
    # reserved space, to avoid reservations for the same project
    # and flavor to overlap.
    lockReserved: true
---
apiVersion: scheduling.cortex/v1alpha1
kind: Step
metadata:
  name: filter-has-requested-traits
spec:
  operator: cortex-nova
  type: filter
  impl: filter_has_requested_traits
  description: |
    This step filters hosts that do not have the requested traits given by the
    nova flavor extra spec: "trait:<trait>": "forbidden" means the host must
    not have the specified trait. "trait:<trait>": "required" means the host
    must have the specified trait.
  knowledges:
    # TODO: Remove this dependency since this is a filter which should
    # not depend on a potentially non-recent knowledge.
    # This should be changed to use the hypervisor CRD.
    - name: host-capabilities
---
apiVersion: scheduling.cortex/v1alpha1
kind: Step
metadata:
  name: filter-has-accelerators
spec:
  operator: cortex-nova
  type: filter
  impl: filter_has_accelerators
  description: |
    This step will filter out hosts without the trait `COMPUTE_ACCELERATORS` if
    the nova flavor extra specs request accelerators via "accel:device_profile".
  # TODO: This step currently depends on traits directly from the datasources.
  # This should be changed to use the hypervisor CRD.
  knowledges: []
---
apiVersion: scheduling.cortex/v1alpha1
kind: Step
metadata:
  name: filter-correct-az
spec:
  operator: cortex-nova
  type: filter
  impl: filter_correct_az
  description: |
    This step will filter out hosts whose aggregate information indicates they
    are not placed in the requested availability zone.
  knowledges:
    # TODO: Remove this dependency since this is a filter which should
    # not depend on a potentially non-recent knowledge.
    # This should be changed to use the hypervisor CRD.
    - name: host-az
---
apiVersion: scheduling.cortex/v1alpha1
kind: Step
metadata:
  name: filter-disabled
spec:
  operator: cortex-nova
  type: filter
  impl: filter_disabled
  description: |
    This step will filter out hosts for which the hypervisor status is
    `disabled`, the hypervisor state is `down`, or the trait
    `COMPUTE_STATUS_DISABLED` is assigned.
  # TODO: This step currently depends on traits directly from the datasources.
  # This should be changed to use the hypervisor CRD.
  knowledges: []
---
apiVersion: scheduling.cortex/v1alpha1
kind: Step
metadata:
  name: filter-external-customer
spec:
  operator: cortex-nova
  type: filter
  impl: filter_external_customer
  description: |
    This step prefix-matches the domain name for external customer domains and
    filters out hosts that are not intended for external customers. It considers
    the `CUSTOM_EXTERNAL_CUSTOMER_SUPPORTED` trait on hosts as well as the
    `domain_name` scheduler hint from the nova request spec.
  # TODO: This step currently depends on traits directly from the datasources.
  # This should be changed to use the hypervisor CRD.
  knowledges: []
  opts:
    domainNamePrefixes: ["iaas-"]
---
apiVersion: scheduling.cortex/v1alpha1
kind: Step
metadata:
  name: filter-packed-virtqueue
spec:
  operator: cortex-nova
  type: filter
  impl: filter_packed_virtqueue
  description: |
    If the flavor extra specs contain the `hw:virtio_packed_ring` key, or the
    image properties contain the `hw_virtio_packed_ring` key, this step will
    filter out hosts that do not have the `COMPUTE_NET_VIRTIO_PACKED` trait.
  # TODO: This step currently depends on traits directly from the datasources.
  # This should be changed to use the hypervisor CRD.
  knowledges: []
---
apiVersion: scheduling.cortex/v1alpha1
kind: Step
metadata:
  name: filter-project-aggregates
spec:
  operator: cortex-nova
  type: filter
  impl: filter_project_aggregates
  description: |
    This step locks certain hosts for certain projects, based on the aggregate
    metadata. Note that hosts without aggregate tenant filter are still
    accessible and will not be filtered out.
  knowledges:
    # TODO: Remove this dependency since this is a filter which should
    # not depend on a potentially non-recent knowledge.
    # This should be changed to use the hypervisor CRD.
    - name: host-pinned-projects
---
apiVersion: scheduling.cortex/v1alpha1
kind: Step
metadata:
  name: filter-compute-capabilities
spec:
  operator: cortex-nova
  type: filter
  impl: filter_compute_capabilities
  description: |
    This step will filter out hosts that do not meet the compute capabilities
    requested by the nova flavor extra specs, like `{"arch": "x86_64",
    "maxphysaddr:bits": 46, ...}`.

    Note: currently, advanced boolean/numeric operators for the capabilities
    like `>`, `!`, ... are not supported because they are not used by any of our
    flavors in production.
  # TODO: This step currently depends on hypervisor capabilities directly from
  # the datasources. This should be changed to use the hypervisor CRD.
  knowledges: []
---
apiVersion: scheduling.cortex/v1alpha1
kind: Step
metadata:
  name: avoid-high-steal-pct
spec:
  operator: cortex-nova
  type: descheduler
  impl: avoid_high_steal_pct
  description: |
    This step will deschedule VMs once they reach this CPU steal percentage over
    the observed time span.
  # TODO: This step currently depends on hypervisor capabilities directly from
  # the datasources. This should be changed to use the hypervisor CRD.
  knowledges: []
  opts:
    maxStealPctOverObservedTimeSpan: 20.0
