# Copyright 2025 SAP SE
# SPDX-License-Identifier: Apache-2.0

image:
  repository: cortex
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: "main"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

resources:
  limits:
    cpu: 250m
    memory: 1024Mi

livenessProbe:
  httpGet:
    path: /metrics
    port: metrics
readinessProbe:
  httpGet:
    path: /metrics
    port: metrics

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

owner-info:
  helm-chart-url: "https://github.com/cobaltcore-dev/cortex/helm/cortex"
  maintainers:
    - "p.matthes@sap.com"
  support-group: "cobaltcore-dev"
  enabled: true

vernemq:
  # Whether a vernemq instance should be spawned and mqtt sent.
  enabled: true
  # The username and password to use for the mqtt connection.
  username: cortex
  password: cortex
  # Name under which the vernemq resources should be spawned.
  fullnameOverride: "cortex-mqtt"
  # Pass a basic configuration through a configmap that is spawned
  # together with the vernemq instance.
  envFrom:
    - configMapRef:
        name: "cortex-mqtt"
  replicaCount: 1

# Modes in which the service should be run.
# Each mode is translated into a separate service and deployment.
modes:
  # Syncer syncs data from external sources into the database(s).
  - name: syncer
    service:
      type: ClusterIP
      metricsPort: 2112
    args: ["syncer"]
    replicas: 1

  # Extractor extracts features from the synced data.
  - name: extractor
    service:
      type: ClusterIP
      metricsPort: 2112
    args: ["extractor"]
    replicas: 1

  # Scheduler exposes the scheduler API and modifies the Nova scheduler weights.
  - name: scheduler
    service:
      type: ClusterIP
      apiPort: 8080
      metricsPort: 2112
    args: ["scheduler"]
    replicas: 2

# Default sso certificate to use for all services.
# The sso certificate values of individual services can be overridden.
sharedSSOCert: &sharedSSOCert
  # Certificate "public key".
  cert: ""
  # Certificate private key.
  certKey: ""
  # Whether the certificate is self-signed.
  # If true, the certificate is not verified.
  selfSigned: false

# Values passed to the service by conf.yaml
conf:
  logging:
    # The log level to use (debug, info, warn, error).
    level: debug
    # The log format to use (json, text).
    format: text

  # Configuration of metrics exported to the /metrics endpoint.
  monitoring:
    # The port to expose the metrics on.
    port: 2112

    # Custom labels added to the exported metrics.
    labels:
      github_org: cobaltcore-dev
      github_repo: cortex

  # Configure here if we should connect to an mqtt broker.
  mqtt:
    enabled: true
    # Must match vernemq.fullnameOverride, vernemq.username and vernemq.password.
    url: "tcp://cortex-mqtt:1883"
    username: "cortex"
    password: "cortex"

  # Connection parameters for the database where data is stored.
  db:
    host: cortex-postgresql
    port: 5432
    user: postgres
    password: secret
    database: postgres

  # Sync plugins config.
  sync:
    prometheus:
      # Prometheus hosts to consider when syncing the metrics.
      hosts:
        - name: vmware_prometheus
          url: https://path-to-vrops-prometheus
          provides: [vrops_vm_metric, vrops_host_metric]
          # Optional, only required if Prometheus is configured with SSO.
          sso: *sharedSSOCert
        - name: kvm_prometheus
          url: https://path-to-node-exporter
          provides: [node_exporter_metric]
          # Optional, only required if Prometheus is configured with SSO.
          sso: *sharedSSOCert
      # Prometheus metrics to sync into the database.
      # Each metric can be synced from a different Prometheus instance.
      # The `type` parameter should map to a known metric model in the database.
      metrics:
        # VROps metrics for VMware hosts.
        - alias: vrops_virtualmachine_cpu_demand_ratio
          query: |
            vrops_virtualmachine_cpu_demand_ratio{}
          type: vrops_vm_metric
        - alias: vrops_hostsystem_cpu_contention_percentage
          query: |
            vrops_hostsystem_cpu_contention_percentage{}
          type: vrops_host_metric
        # Node exporter metrics for KVM hosts.
        - alias: node_exporter_cpu_usage_pct
          query: |
            (1 - (
              sum by (node) (rate(node_cpu_seconds_total{mode="idle"}[1m])) /
              count by (node) (rate(node_cpu_seconds_total{mode="idle"}[1m]))
            )) * 100
          type: node_exporter_metric

    openstack:
      keystone:
        # Authentication/identity service URL for openstack.
        url: https://path-to-keystone/v3
        # Optional, only required if OpenStack is configured with SSO.
        # Note: the certificate will be used for all other OpenStack services.
        sso: *sharedSSOCert

        # OpenStack login credentials also used by the OpenStack CLI.
        username: openstack-user-with-all-project-read-access
        password: openstack-user-password
        projectName: openstack-project-of-user
        userDomainName: openstack-domain-of-user
        projectDomainName: openstack-domain-of-project-scoped-to
      nova:
        # One of admin, public, or internal
        availability: public
        # Nova objects to sync into the database.
        types:
          - hypervisors
          - servers
          - flavors
      placement:
        # One of admin, public, or internal
        availability: public
        # Placement objects to sync into the database.
        types:
          # - resource_providers
          # Needs resource_providers.
          # - traits

  features:
    # Configuration of features that should be extracted from the synced data.
    # Each extractor can specify its own dependencies on other extractors or
    # synced data.
    #
    # The `name` should correspond to a known feature extractor plugin.
    # Note that the order defined here will also be the order in which the
    # extractors are executed. If possible, extractors whose dependencies have
    # been executed will be executed in parallel to speed up the process.
    extractors:
      # VMware-specific extractors.
      - name: vrops_hostsystem_resolver
        dependencies:
          sync:
            prometheus:
              metrics:
                # Any vrops vm metric suffices.
                - vrops_virtualmachine_cpu_demand_ratio
            openstack:
              nova:
                types:
                  - hypervisors
                  - servers
      - name: vrops_project_noisiness_extractor
        dependencies:
          sync:
            prometheus:
              metrics:
                - vrops_virtualmachine_cpu_demand_ratio
            openstack:
              nova:
                types:
                  - hypervisors
                  - servers
      - name: vrops_hostsystem_contention_extractor
        dependencies:
          features:
            extractors:
              - vrops_hostsystem_resolver
          sync:
            prometheus:
              metrics:
                - vrops_hostsystem_cpu_contention_percentage

      # KVM-specific extractors.
      - name: node_exporter_host_cpu_usage_extractor
        dependencies:
          sync:
            prometheus:
              metrics:
                - node_exporter_cpu_usage_pct

      # Shared extractors.
      - name: flavor_host_space_extractor
        dependencies:
          sync:
            openstack:
              nova:
                types:
                  - flavors
                  - hypervisors

  scheduler:
    api:
      # The port to use for the scheduler API.
      port: 8080
      # Whether request bodies should be logged (debugging feature).
      logRequestBodies: false
    # Configuration of scheduler steps that modify the Nova scheduler weights.
    # Each scheduler step can specify its own dependencies on extractors and
    # synced data.
    #
    # The `name` should correspond to a known scheduler plugin.
    # Note that all scheduler steps will be executed in parallel. However,
    # the order will be maintained when the weights are applied to the
    # input Nova weights.
    steps:
      # VMware specific scheduler steps.
      - name: vmware_anti_affinity_noisy_projects
        options:
          # Min-max scaling for avg CPU usage of the project on a host.
          avgCPUUsageLowerBound: 0
          avgCPUUsageUpperBound: 100
          avgCPUUsageActivationLowerBound: 0.25
          avgCPUUsageActivationUpperBound: -0.5
        dependencies:
          features:
            extractors:
              - vrops_project_noisiness_extractor
      - name: vmware_avoid_contended_hosts
        options:
          # Min-max scaling for avg CPU contention on the host.
          avgCPUContentionLowerBound: 0
          avgCPUContentionUpperBound: 100
          avgCPUContentionActivationLowerBound: 0.25
          avgCPUContentionActivationUpperBound: -0.5
          # Min-max scaling for max CPU contention on the host.
          maxCPUContentionLowerBound: 0
          maxCPUContentionUpperBound: 100
          maxCPUContentionActivationLowerBound: 0.25
          maxCPUContentionActivationUpperBound: -0.5
        dependencies:
          features:
            extractors:
              - vrops_hostsystem_contention_extractor

      # KVM specific scheduler steps.
      - name: kvm_avoid_overloaded_hosts
        options:
          # Min-max scaling for avg CPU usage on the host.
          avgCPUUsageLowerBound: 0
          avgCPUUsageUpperBound: 100
          avgCPUUsageActivationLowerBound: 0.25
          avgCPUUsageActivationUpperBound: -0.5
          # Min-max scaling for max CPU usage on the host.
          maxCPUUsageLowerBound: 0
          maxCPUUsageUpperBound: 100
          maxCPUUsageActivationLowerBound: 0.25
          maxCPUUsageActivationUpperBound: -0.5
        dependencies:
          features:
            extractors:
              - node_exporter_host_cpu_usage_extractor

      # Shared scheduler steps.
      - name: shared_flavor_binpacking
        options:
          # Min-max scaling for gap-fitting based on cpu space left (vCPUs).
          cpuEnabled: true
          cpuFreeLowerBound: 0
          cpuFreeUpperBound: 128
          cpuFreeActivationLowerBound: 0.25
          cpuFreeActivationUpperBound: -0.5
          # Min-max scaling for gap-fitting based on memory space left (MB).
          ramEnabled: true
          ramFreeLowerBound: 0
          ramFreeUpperBound: 4000000
          ramFreeActivationLowerBound: 0.25
          ramFreeActivationUpperBound: -0.5
          # Min-max scaling for gap-fitting based on disk space left. (GB)
          diskEnabled: false
          diskFreeLowerBound: 0
          diskFreeUpperBound: 1000
          diskFreeActivationLowerBound: 0.25
          diskFreeActivationUpperBound: -0.5
        dependencies:
          features:
            extractors:
              - flavor_host_space_extractor
