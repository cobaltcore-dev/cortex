# Copyright 2025 SAP SE
# SPDX-License-Identifier: Apache-2.0

owner-info:
  helm-chart-url: "https://github.com/cobaltcore-dev/cortex/helm/cortex"
  maintainers:
    - "p.matthes@sap.com"
    - "markus.wieland@sap.com"
    - "arno.uhlig@sap.com"
  support-group: "cobaltcore-dev"
  enabled: true

image:
  repository: ghcr.io/cobaltcore-dev/cortex
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: "sha-e13c4f4"

migrationsJob:
  # Additional annotations for the created database migrations job.
  podAnnotations:
    # If you use linkerd, this will disable injection for the migrations job.
    # Otherwise, the linkerd-proxy container will hang around forever and
    # block the job from completing.
    "linkerd.io/inject": disabled

# Resources granted to the cortex services.
resources:
  limits:
    cpu: 250m
    memory: 1024Mi

# Liveness and readiness probes for the cortex services.
livenessProbe:
  httpGet:
    path: /up
    port: api
readinessProbe:
  httpGet:
    path: /up
    port: api

# Modes in which the service should be run.
# Each mode is translated into a separate service and deployment.
modes:
  # Syncer syncs data from external sources into the database(s).
  - name: syncer
    args: ["syncer"]
    replicas: 1

  # Extractor extracts features from the synced data.
  - name: extractor
    args: ["extractor"]
    replicas: 1

  # External scheduler for Nova.
  - name: scheduler-nova
    args: ["scheduler-nova"]
    replicas: 1

  # External scheduler for Manila.
  - name: scheduler-manila
    args: ["scheduler-manila"]
    replicas: 1

  # Service that extracts and exposes KPIs.
  - name: kpis
    args: ["kpis"]
    replicas: 1

# Default sso certificate to use for all services.
# The sso certificate values of individual services can be overridden.
sharedSSOCert: &sharedSSOCert
  # Certificate "public key".
  cert: ""
  # Certificate private key.
  certKey: ""
  # Whether the certificate is self-signed.
  # If true, the certificate is not verified.
  selfSigned: false

# Values passed to the service by conf.yaml
conf:
  logging:
    # The log level to use (debug, info, warn, error).
    level: debug
    # The log format to use (json, text).
    format: text

  # Configuration of metrics exported to the /metrics endpoint.
  monitoring:
    # The port to expose the metrics on.
    port: 2112

    # Custom labels added to the exported metrics.
    labels:
      github_org: cobaltcore-dev
      github_repo: cortex

  # Configure here if we should connect to an mqtt broker.
  mqtt:
    # Must match rabbitmq settings from the cortex-mqtt chart.
    url: "tcp://cortex-mqtt:1883"
    username: "cortex"
    password: "secret"
    reconnect:
      maxRetries: 20
      retryIntervalSeconds: 1

  # The port to use for the api serve mux.
  api:
    port: 8080

  # Connection parameters for the database where data is stored.
  db:
    host: cortex-postgresql
    port: 5432
    user: postgres
    password: secret
    database: postgres
    reconnect:
      maxRetries: 20
      retryIntervalSeconds: 1
      livenessPingIntervalSeconds: 5

  # Sync plugins config.
  sync:
    prometheus:
      # Prometheus hosts to consider when syncing the metrics.
      hosts:
        - name: vmware_prometheus
          url: https://path-to-vrops-prometheus
          provides: [vrops_vm_metric, vrops_host_metric]
          # Optional, only required if Prometheus is configured with SSO.
          sso: *sharedSSOCert
        - name: kvm_prometheus
          url: https://path-to-node-exporter
          provides: [node_exporter_metric]
          # Optional, only required if Prometheus is configured with SSO.
          sso: *sharedSSOCert
      # Prometheus metrics to sync into the database.
      # Each metric can be synced from a different Prometheus instance.
      # The `type` parameter should map to a known metric model in the database.
      metrics:
        # VROps metrics for VMware hosts.
        - alias: vrops_virtualmachine_cpu_demand_ratio
          query: |
            vrops_virtualmachine_cpu_demand_ratio{}
          type: vrops_vm_metric
        - alias: vrops_hostsystem_cpu_contention_long_term_percentage
          query: |
            vrops_hostsystem_cpu_contention_percentage{}
          type: vrops_host_metric
        - alias: vrops_hostsystem_cpu_contention_short_term_percentage
          query: |
            vrops_hostsystem_cpu_contention_percentage{}
          type: vrops_host_metric
          timeRangeSeconds: 1200 # 20 minutes
          intervalSeconds:  300 # 5 minutes
          resolutionSeconds: 60 # 1 minute
        # Node exporter metrics for KVM hosts.
        - alias: node_exporter_cpu_usage_pct
          query: |
            (1 - (
              sum by (node) (rate(node_cpu_seconds_total{mode="idle"}[1m])) /
              count by (node) (rate(node_cpu_seconds_total{mode="idle"}[1m]))
            )) * 100
          type: node_exporter_metric
        - alias: node_exporter_memory_active_pct
          query: |
            (1 - (
              (sum by (node) (node_memory_Active_bytes) / count by (node) (node_memory_Active_bytes)) /
              (sum by (node) (node_memory_MemTotal_bytes) / count by (node) (node_memory_MemTotal_bytes))
            )) * 100
          type: node_exporter_metric

    openstack:
      keystone:
        # Authentication/identity service URL for openstack.
        url: https://path-to-keystone/v3
        # Optional, only required if OpenStack is configured with SSO.
        # Note: the certificate will be used for all other OpenStack services.
        sso: *sharedSSOCert

        # OpenStack login credentials also used by the OpenStack CLI.
        username: openstack-user-with-all-project-read-access
        password: openstack-user-password
        projectName: openstack-project-of-user
        userDomainName: openstack-domain-of-user
        projectDomainName: openstack-domain-of-project-scoped-to
      nova:
        # One of admin, public, or internal
        availability: public
        # Nova objects to sync into the database.
        types:
          - hypervisors
          - servers
          - flavors
          - migrations
          - aggregates
      placement:
        # One of admin, public, or internal
        availability: public
        # Placement objects to sync into the database.
        types:
          - resource_providers
          # Needs resource_providers.
          - traits
          - inventory_usages
      manila:
        # One of admin, public, or internal
        availability: public
        # Manila objects to sync into the database.
        types:
          - storage_pools

  extractor:
    # Configuration of features that should be extracted from the synced data.
    # Each extractor can specify its own dependencies on other extractors or
    # synced data.
    #
    # The `name` should correspond to a known feature extractor plugin.
    # Note that the order defined here will also be the order in which the
    # extractors are executed. If possible, extractors whose dependencies have
    # been executed will be executed in parallel to speed up the process.
    plugins:
      # VMware-specific extractors.
      - name: vrops_hostsystem_resolver
        recencySeconds: 3600 # 1 hour
        dependencies:
          sync:
            prometheus:
              metrics:
                # Any vrops vm metric suffices.
                - type: vrops_vm_metric
            openstack:
              nova:
                types:
                  - hypervisors
                  - servers
      - name: vrops_project_noisiness_extractor
        recencySeconds: 21600 # 6 hours
        dependencies:
          sync:
            prometheus:
              metrics:
                - alias: vrops_virtualmachine_cpu_demand_ratio
            openstack:
              nova:
                types:
                  - hypervisors
                  - servers
      - name: vrops_hostsystem_contention_long_term_extractor
        dependencies:
          extractors:
            - vrops_hostsystem_resolver
          sync:
            prometheus:
              metrics:
                - alias: vrops_hostsystem_cpu_contention_long_term_percentage
      - name: vrops_hostsystem_contention_short_term_extractor
        dependencies:
          extractors:
            - vrops_hostsystem_resolver
          sync:
            prometheus:
              metrics:
                - alias: vrops_hostsystem_cpu_contention_short_term_percentage

      # KVM-specific extractors.
      - name: node_exporter_host_cpu_usage_extractor
        dependencies:
          sync:
            prometheus:
              metrics:
                - alias: node_exporter_cpu_usage_pct
      - name: node_exporter_host_memory_active_extractor
        dependencies:
          sync:
            prometheus:
              metrics:
                - alias: node_exporter_memory_active_pct

      # Shared extractors.
      - name: storage_pool_utilization_extractor
        recencySeconds: 60 # 1 minute
        dependencies:
          sync:
            openstack:
              manila:
                types:
                  - storage_pools
      - name: host_utilization_extractor
        recencySeconds: 60 # 1 minute
        dependencies:
          sync:
            openstack:
              nova:
                types:
                  - hypervisors
      - name: host_capabilities_extractor
        recencySeconds: 60 # 1 minute
        dependencies:
          sync:
            openstack:
              nova:
                types:
                  - hypervisors
              placement:
                types:
                  - traits
      - name: vm_host_residency_extractor
        recencySeconds: 60 # 1 minute
        dependencies:
          sync:
            openstack:
              nova:
                types:
                  - flavors
                  - servers
                  - migrations
      - name: vm_life_span_histogram_extractor
        recencySeconds: 60 # 1 minute
        dependencies:
          sync:
            openstack:
              nova:
                types:
                  - flavors
                  - servers

  kpis:
    # Configuration of KPIs that should be extracted from the synced data.
    # Each KPI can specify its own dependencies on other extractors and
    # synced data.
    #
    # The `name` should correspond to a known KPI extractor plugin.
    plugins:
      # VMware-specific KPIs.
      - name: vmware_host_contention_kpi
        dependencies:
          extractors:
            - vrops_hostsystem_contention_long_term_extractor
      - name: vmware_project_noisiness_kpi
        dependencies:
          extractors:
            - vrops_project_noisiness_extractor
      # Shared KPIs.
      - name: host_utilization_kpi
        dependencies:
          extractors:
            - host_utilization_extractor
      - name: vm_migration_statistics_kpi
        dependencies:
          extractors:
              - vm_host_residency_extractor
      - name: vm_life_span_kpi
        dependencies:
          extractors:
            - vm_life_span_histogram_extractor

  scheduler:
    api:
      # Whether request bodies should be logged (debugging feature).
      logRequestBodies: false

    manila:
      # Configuration of scheduler steps that modify the Manila scheduler weights.
      # Each scheduler step can specify its own dependencies on extractors and
      # synced data.
      #
      # The `name` should correspond to a known scheduler plugin.
      # Note that all scheduler steps will be executed in parallel. However,
      # the order will be maintained when the weights are applied to the
      # input weights.
      plugins:
        # Bin-packing for Manila storage pools.
        - name: capacity_balancing
          options:
            # Min-max scaling for gap-fitting based on capacity left (pct)
            # Note the inverted values here -> binpacking instead of balancing.
            utilizedLowerBoundPct: 100
            utilizedUpperBoundPct: 0
            utilizedActivationLowerBound: 0.0
            utilizedActivationUpperBound: 1.0
          dependencies:
            extractors:
              - storage_pool_utilization_extractor

    nova:
      # Dependencies needed by all the Nova scheduler steps.
      dependencies:
        extractors:
          # Needed for the step scoper which checks stuff like the hypervisor
          # type and traits as well as the vm flavor in the request spec.
          - host_capabilities_extractor

      # Configuration of scheduler steps that modify the Nova scheduler weights.
      # Each scheduler step can specify its own dependencies on extractors and
      # synced data.
      #
      # The `name` should correspond to a known scheduler plugin.
      # Note that all scheduler steps will be executed in parallel. However,
      # the order will be maintained when the weights are applied to the
      # input Nova weights.
      plugins:
        # Avoid co-location of noisy projects on the same host.
        # This step depends on vrops metrics and is thus only
        # executed for VMware vms.
        - name: vmware_anti_affinity_noisy_projects
          scope:
            specSelectors:
              - subject: vmware
                type: bool
                value: true
                action: continue
          options:
            avgCPUUsageLowerBound: 0 # pct
            avgCPUUsageUpperBound: 10 # pct
            avgCPUUsageActivationLowerBound: 0.0
            avgCPUUsageActivationUpperBound: -1.0
          dependencies:
            extractors: [vrops_project_noisiness_extractor]

        # Avoid placing vms on hosts with a high CPU contention over a longer
        # period of time. This step depends on vrops metrics and is thus only
        # executed for VMware vms.
        - name: vmware_avoid_long_term_contended_hosts
          scope:
            specSelectors:
              - subject: vmware
                type: bool
                value: true
                action: continue
          options:
            avgCPUContentionLowerBound: 0 # pct
            avgCPUContentionUpperBound: 10 # pct
            avgCPUContentionActivationLowerBound: 0.0
            avgCPUContentionActivationUpperBound: -0.75
            maxCPUContentionLowerBound: 0 # pct
            maxCPUContentionUpperBound: 10 # pct
            maxCPUContentionActivationLowerBound: 0.0
            maxCPUContentionActivationUpperBound: -0.25
          dependencies:
            extractors: [vrops_hostsystem_contention_long_term_extractor]

        # Avoid placing vms on hosts with a high CPU contention over a shorter
        # period of time. This step depends on vrops metrics and is thus only
        # executed for VMware vms.
        - name: vmware_avoid_short_term_contended_hosts
          scope:
            specSelectors:
              - subject: vmware
                type: bool
                value: true
                action: continue
          options:
            avgCPUContentionLowerBound: 0 # pct
            avgCPUContentionUpperBound: 10 # pct
            avgCPUContentionActivationLowerBound: 0.0
            avgCPUContentionActivationUpperBound: -0.75
            maxCPUContentionLowerBound: 0 # pct
            maxCPUContentionUpperBound: 10 # pct
            maxCPUContentionActivationLowerBound: 0.0
            maxCPUContentionActivationUpperBound: -0.25
          dependencies:
            extractors: [vrops_hostsystem_contention_short_term_extractor]

        # Avoid placing vms on hosts with a high CPU demand ratio.
        # This step depends on node exporter metrics and is executed
        # for non-vmware vms (for vmware we use vrops metrics).
        - name: kvm_avoid_overloaded_hosts_cpu
          scope:
            specSelectors:
              # Only execute this step for non-vmware vms.
              - subject: vmware
                type: bool
                value: false
                action: continue
          options:
            avgCPUUsageLowerBound: 0 # pct
            avgCPUUsageUpperBound: 10 # pct
            avgCPUUsageActivationLowerBound: 0.0
            avgCPUUsageActivationUpperBound: -0.75
            maxCPUUsageLowerBound: 0 # pct
            maxCPUUsageUpperBound: 10 # pct
            maxCPUUsageActivationLowerBound: 0.0
            maxCPUUsageActivationUpperBound: -0.25
          dependencies:
            extractors: [node_exporter_host_cpu_usage_extractor]

        # Avoid placing vms on hosts with a high memory demand ratio.
        # This step depends on node exporter metrics and is executed
        # for non-vmware vms (for vmware we use vrops metrics).
        - name: kvm_avoid_overloaded_hosts_memory
          scope:
            specSelectors:
              - subject: vmware
                type: bool
                value: false
                action: continue
          options:
            avgMemoryUsageLowerBound: 0 # pct
            avgMemoryUsageUpperBound: 10 # pct
            avgMemoryUsageActivationLowerBound: 0.0
            avgMemoryUsageActivationUpperBound: -0.75
            maxMemoryUsageLowerBound: 0 # pct
            maxMemoryUsageUpperBound: 10 # pct
            maxMemoryUsageActivationLowerBound: 0.0
            maxMemoryUsageActivationUpperBound: -0.25
          dependencies:
            extractors: [node_exporter_host_memory_active_extractor]

        # Balance non-hana vmware vms on non-hana hosts.
        # This step only depends on openstack data and is thus available for
        # all vms, regardless of the hypervisor. However, in this configuration
        # we only execute it for VMware vms.
        - name: shared_resource_balancing
          scope:
            hostSelectors:
              # Note: due to the vmware spec selector, it is expected that
              # this step is only executed for VMware hosts. However,
              # we don't want to balance on HANA exclusive hosts.
              - subject: trait
                type: infix
                value: "HANA_EXCLUSIVE"
                operation: difference
            specSelectors:
              # Don't balance HANA vms.
              - subject: flavor
                type: infix
                value: "hana"
                action: skip
              - subject: vmware
                type: bool
                value: true
                action: continue
          options:
            # In this configuration, we only consider the memory usage.
            cpuEnabled: false
            cpuUtilizedLowerBoundPct: 0
            cpuUtilizedUpperBoundPct: 100
            cpuUtilizedActivationLowerBound: 1.0
            cpuUtilizedActivationUpperBound: 0.0
            ramEnabled: true
            ramUtilizedLowerBoundPct: 0
            ramUtilizedUpperBoundPct: 100
            ramUtilizedActivationLowerBound: 1.0
            ramUtilizedActivationUpperBound: 0.0
            diskEnabled: false
            diskUtilizedLowerBoundPct: 0
            diskUtilizedUpperBoundPct: 100
            diskUtilizedActivationLowerBound: 1.0
            diskUtilizedActivationUpperBound: 0.0
          dependencies:
            extractors: [host_utilization_extractor]

# Generic modifiers added on the initial creation of this helm chart.

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""
podAnnotations: {}
podLabels: {}
podSecurityContext: {}
securityContext: {}
volumes: []
volumeMounts: []
nodeSelector: {}
tolerations: []
affinity: {}
