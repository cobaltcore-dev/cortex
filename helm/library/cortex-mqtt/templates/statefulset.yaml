apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "cortex-mqtt.fullname" . }}
  annotations:
    checksum/image: "{{ .Values.image.tag }}"
    kubectl.kubernetes.io/default-container: {{ include "cortex-mqtt.fullname" . }}
  labels:
    app: {{ include "cortex-mqtt.fullname" . }}
    {{- include "cortex-mqtt.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
      {{- include "cortex-mqtt.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        app: {{ include "cortex-mqtt.fullname" . }}
        {{- include "cortex-mqtt.labels" . | nindent 8 }}
    spec:
      initContainers:
        - name: "init-config"
          image: "{{ .Values.initContainer.image.repository }}:{{ .Values.initContainer.image.tag }}"
          imagePullPolicy: {{ .Values.initContainer.image.pullPolicy }}
          volumeMounts:
            - name: {{ include "cortex-mqtt.fullname" . }}-config
              mountPath: /tmp/rabbitmq
            - name: {{ include "cortex-mqtt.fullname" . }}-config-rw
              mountPath: /etc/rabbitmq
          command:
            - sh
            - -c
            # the newline is needed since the Docker image entrypoint scripts appends to the config file
            - cp /tmp/rabbitmq/rabbitmq.conf /etc/rabbitmq/rabbitmq.conf && echo '' >> /etc/rabbitmq/rabbitmq.conf;
              cp /tmp/rabbitmq/enabled_plugins /etc/rabbitmq/enabled_plugins;
              echo 'Copied enabled_plugins and rabbitmq.conf to /etc/rabbitmq/'
              echo 'Content of enabled_plugins:';
              cat /etc/rabbitmq/enabled_plugins;
              echo 'Content of rabbitmq.conf:';
              cat /etc/rabbitmq/rabbitmq.conf;
      volumes:
        - name: {{ include "cortex-mqtt.fullname" . }}-config
          configMap:
            name: {{ include "cortex-mqtt.fullname" . }}-config
            optional: false
            items:
            - key: enabled_plugins
              path: "enabled_plugins"
            - key: rabbitmq.conf
              path: "rabbitmq.conf"
        - name: {{ include "cortex-mqtt.fullname" . }}-config-rw
          emptyDir: {}
      containers:
        - name: {{ include "cortex-mqtt.fullname" . }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          volumeMounts:
            - name: {{ include "cortex-mqtt.fullname" . }}-config-rw
              mountPath: /etc/rabbitmq
          env:
            - name: RABBITMQ_DEFAULT_USER
              valueFrom:
                secretKeyRef:
                  name: {{ include "cortex-mqtt.fullname" . }}-secret
                  key: rabbitmq-username
            - name: RABBITMQ_DEFAULT_PASS
              valueFrom:
                secretKeyRef:
                  name: {{ include "cortex-mqtt.fullname" . }}-secret
                  key: rabbitmq-password
            - name: RABBITMQ_ERLANG_COOKIE
              valueFrom:
                secretKeyRef:
                  name: {{ include "cortex-mqtt.fullname" . }}-secret
                  key: rabbitmq-erlang-cookie
          ports:
            - name: mqtt
              containerPort: 1883
              protocol: TCP
            - name: websocket
              containerPort: 15675
              protocol: TCP
          livenessProbe:
            exec:
              command: ["rabbitmq-diagnostics", "ping"]
            initialDelaySeconds: 5
            periodSeconds: 60
            timeoutSeconds: 10
            failureThreshold: 3
          readinessProbe: # probe to know when RMQ is ready to accept traffic
            exec:
              command: ["rabbitmq-diagnostics", "ping"]
            initialDelaySeconds: 5
            periodSeconds: 60
            timeoutSeconds: 10