# Copyright 2025 SAP SE
# SPDX-License-Identifier: Apache-2.0

name: Test and Report Coverage

on:
  push:
  pull_request:
    branches:
      - '*'

jobs:
  test-without-docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.24.2
      - name: Test quickly without Docker
        run: go test -v ./...

  test-with-docker:
    # We don't need to run this longer test if the previous one already failed.
    needs: test-without-docker
    runs-on: ubuntu-latest
    services:
      dind:
        image: docker:23.0-rc-dind-rootless
        ports:
          - 2375:2375
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.24.2
      - name: Run tests with Docker and calculate coverage
        run: |
          export POSTGRES_CONTAINER=1
          export VERNEMQ_CONTAINER=1
          go test -v \
            -coverpkg=./internal/... \
            -coverprofile=pr_profile.cov ./internal/...
          go tool cover -func pr_profile.cov > pr_func_coverage.txt
      - name: Upload coverage file
        uses: actions/upload-artifact@v4
        with:
          name: pr-func-coverage
          path: pr_func_coverage.txt
      # Steps below are only executed if the workflow is triggered by a pull request
      - name: Checkout base commit (PR only)
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.base.sha }}
      - name: Run tests on base commit and calculate previous coverage (PR only)
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          export POSTGRES_CONTAINER=1
          export VERNEMQ_CONTAINER=1
          go test -v \
            -coverpkg=./internal/... \
            -coverprofile=base_profile.cov ./internal/...
          go tool cover -func base_profile.cov > base_func_coverage.txt
      - name: Upload previous coverage file (PR only)
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/upload-artifact@v4
        with:
          name: base-func-coverage
          path: base_func_coverage.txt
      - name: Delete old coverage comments (PR only)
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            const coverageCommentTag = '<!-- coverage-comment -->';
            for (const comment of comments) {
              if (comment.body.includes(coverageCommentTag)) {
                await github.rest.issues.deleteComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: comment.id,
                });
              }
            }
      - name: Download coverage file (PR only)
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/download-artifact@v4
        with:
          name: pr-func-coverage
          path: .
      - name: Download previous coverage file (PR only)
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/download-artifact@v4
        with:
          name: base-func-coverage
          path: .
      - name: Post coverage comment (PR only)
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            // Helper function to parse coverage files
            function parseCoverageFile(filePath) {
              const lines = fs.readFileSync(filePath, 'utf-8').split('\n');
              const coverageData = {};
              for (const line of lines) {
                const match = line.match(/^(.*?):(\d+):\s+(.*?)\s+([\d.]+)%$/);
                if (match) {
                  const [_, file, lineNumber, functionName, coverage] = match;
                  const key = `${file}:${lineNumber}`;
                  coverageData[key] = {
                    functionName,
                    coverage: parseFloat(coverage),
                  };
                }
              }
              return coverageData;
            }

            // Read and parse the coverage files
            const prCoverage = parseCoverageFile('pr_func_coverage.txt');
            const baseCoverage = parseCoverageFile('base_func_coverage.txt');

            // Calculate changes in coverage
            const coverageChanges = [];
            for (const key in prCoverage) {
              const prData = prCoverage[key];
              const baseData = baseCoverage[key];
              const change = baseData
                ? (prData.coverage - baseData.coverage).toFixed(2)
                : prData.coverage.toFixed(2);
              if (change === '0.00') {
                // Skip unchanged functions
                continue;
              }
              coverageChanges.push({
                file: key.split(':')[0].replace('github.com/cobaltcore-dev/cortex/', ''),
                line: key.split(':')[1],
                functionName: prData.functionName,
                coverage: prData.coverage.toFixed(2),
                change: baseData ? `${change >= 0 ? '+' : ''}${change}%` : 'New',
              });
            }

            // Generate the comment body
            const currentCoverage = (
              Object.values(prCoverage).reduce((sum, { coverage }) => sum + coverage, 0) /
              Object.keys(prCoverage).length
            ).toFixed(2);
            const baseCoverageAvg = baseCoverage
              ? (
                  Object.values(baseCoverage).reduce((sum, { coverage }) => sum + coverage, 0) /
                  Object.keys(baseCoverage).length
                ).toFixed(2)
              : 0;
            const change = (currentCoverage - baseCoverageAvg).toFixed(2);

            const packageDetails = coverageChanges
              .map(
                ({ file, line, functionName, coverage, change }) =>
                  "- "+"`"+`${file}:${line}`+"`"+`${functionName} ${coverage}% (${change})`
              )
              .join('\n');

            const commentBody = `
              <!-- coverage-comment -->
              <details>
              <summary>Coverage in go module internal/: ${currentCoverage}% (${change >= 0 ? '+' : ''}${change}%)</summary>

              ${packageDetails}
              </details>
            `;

            // Post the comment
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody,
            });