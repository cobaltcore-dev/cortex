# Copyright 2025 SAP SE
# SPDX-License-Identifier: Apache-2.0

name: Test and Report Coverage

on:
  push:
  pull_request:
    branches:
      - '*'

jobs:
  test-without-docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version-file: 'go.mod'
      - name: Test quickly without Docker
        run: |
          echo "Testing main module..."
          go test -v ./...
          echo "Testing reservations module..."
          cd reservations && go test -v ./...
          echo "Testing decisions module..."
          cd ../decisions && go test -v ./...

  test-with-docker:
    # We don't need to run this longer test if the previous one already failed.
    needs: test-without-docker
    runs-on: ubuntu-latest
    services:
      dind:
        image: docker:rc-dind-rootless
        ports:
          - 2375:2375
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version-file: 'go.mod'
      - name: Run tests with Docker and calculate coverage
        run: |
          export GITHUB_ACTIONS=1
          export POSTGRES_CONTAINER=1
          export RABBITMQ_CONTAINER=1

          echo "Running tests for main module..."
          go test -v \
            -coverpkg=./internal/... \
            -coverprofile=pr_profile.cov ./internal/...
          go tool cover -func pr_profile.cov > pr_func_coverage.txt

          echo "Running tests for reservations module..."
          cd reservations
          go test -v \
            -coverpkg=./internal/... \
            -coverprofile=reservations_profile.cov ./internal/...
          go tool cover -func reservations_profile.cov > reservations_func_coverage.txt
          cd ..

          echo "Running tests for decisions module..."
          cd decisions
          go test -v \
            -coverpkg=./internal/... \
            -coverprofile=decisions_profile.cov ./internal/...
          go tool cover -func decisions_profile.cov > decisions_func_coverage.txt
          cd ..
      - name: Upload coverage files
        uses: actions/upload-artifact@v4
        with:
          name: pr-func-coverage
          path: |
            pr_func_coverage.txt
            reservations/reservations_func_coverage.txt
            decisions/decisions_func_coverage.txt
      # Steps below are only executed if the workflow is triggered by a pull request
      - name: Delete old coverage comments (PR only)
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/github-script@v8
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            const coverageCommentTag = '<!-- coverage-comment -->';
            for (const comment of comments) {
              if (comment.body.includes(coverageCommentTag)) {
                await github.rest.issues.deleteComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: comment.id,
                });
              }
            }
      - name: Download coverage files (PR only)
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/download-artifact@v5
        with:
          name: pr-func-coverage
          path: .
      - name: Post coverage comment (PR only)
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/github-script@v8
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            // Read main module coverage report
            const mainCoverageReport = fs.readFileSync('pr_func_coverage.txt', 'utf8');
            const mainLines = mainCoverageReport.trim().split('\n');
            const mainLastLine = mainLines[mainLines.length - 1];
            const mainCoverageMatch = mainLastLine.match(/total:\s+\(statements\)\s+(\d+\.\d+)%/);
            const mainCoveragePercentage = mainCoverageMatch ? mainCoverageMatch[1] : 'unknown';

            // Read reservations module coverage report
            let reservationsCoverageReport = '';
            let reservationsCoveragePercentage = 'unknown';
            try {
              reservationsCoverageReport = fs.readFileSync('reservations/reservations_func_coverage.txt', 'utf8');
              const reservationsLines = reservationsCoverageReport.trim().split('\n');
              const reservationsLastLine = reservationsLines[reservationsLines.length - 1];
              const reservationsCoverageMatch = reservationsLastLine.match(/total:\s+\(statements\)\s+(\d+\.\d+)%/);
              reservationsCoveragePercentage = reservationsCoverageMatch ? reservationsCoverageMatch[1] : 'unknown';
            } catch (error) {
              reservationsCoverageReport = 'No coverage data available';
            }

            // Read decisions module coverage report
            let decisionsCoverageReport = '';
            let decisionsCoveragePercentage = 'unknown';
            try {
              decisionsCoverageReport = fs.readFileSync('decisions/decisions_func_coverage.txt', 'utf8');
              const decisionsLines = decisionsCoverageReport.trim().split('\n');
              const decisionsLastLine = decisionsLines[decisionsLines.length - 1];
              const decisionsCoverageMatch = decisionsLastLine.match(/total:\s+\(statements\)\s+(\d+\.\d+)%/);
              decisionsCoveragePercentage = decisionsCoverageMatch ? decisionsCoverageMatch[1] : 'unknown';
            } catch (error) {
              decisionsCoverageReport = 'No coverage data available';
            }

            let commentBody = '<!-- coverage-comment -->\n';
            commentBody += '## Test Coverage Report\n\n';

            // Main module coverage
            commentBody += '<details>\n';
            commentBody += '<summary>Coverage in main module (internal/): ';
            commentBody += mainCoveragePercentage;
            commentBody += '%</summary>\n\n';
            commentBody += '```text\n';
            commentBody += mainCoverageReport;
            commentBody += '```\n';
            commentBody += '</details>\n\n';

            // Reservations module coverage
            commentBody += '<details>\n';
            commentBody += '<summary>Coverage in reservations module (reservations/internal/): ';
            commentBody += reservationsCoveragePercentage;
            commentBody += '%</summary>\n\n';
            commentBody += '```text\n';
            commentBody += reservationsCoverageReport;
            commentBody += '```\n';
            commentBody += '</details>\n\n';

            // Decisions module coverage
            commentBody += '<details>\n';
            commentBody += '<summary>Coverage in decisions module (decisions/internal/): ';
            commentBody += decisionsCoveragePercentage;
            commentBody += '%</summary>\n\n';
            commentBody += '```text\n';
            commentBody += decisionsCoverageReport;
            commentBody += '```\n';
            commentBody += '</details>\n';

            // Post the comment
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody,
            });
