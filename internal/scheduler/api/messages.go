// Copyright 2025 SAP SE
// SPDX-License-Identifier: Apache-2.0

package api

import "github.com/cobaltcore-dev/cortex/internal/scheduler/plugins"

// Wrapped Nova object. Nova returns objects in this format.
type NovaObject[V any] struct {
	Name      string   `json:"nova_object.name"`
	Namespace string   `json:"nova_object.namespace"`
	Version   string   `json:"nova_object.version"`
	Data      V        `json:"nova_object.data"`
	Changes   []string `json:"nova_object.changes"`
}

// Spec object from the Nova scheduler pipeline.
// See: https://github.com/sapcc/nova/blob/stable/xena-m3/nova/objects/request_spec.py
type NovaSpec struct {
	ProjectID        string                    `json:"project_id"`
	UserID           string                    `json:"user_id"`
	AvailabilityZone string                    `json:"availability_zone"`
	NInstances       int                       `json:"num_instances"`
	Image            NovaObject[NovaImageMeta] `json:"image"`
	Flavor           NovaObject[NovaFlavor]    `json:"flavor"`
}

// Nova image metadata for the specified VM.
type NovaImageMeta struct {
	Name    string `json:"name"`
	Size    int    `json:"size"`
	MinRAM  int    `json:"min_ram"`
	MinDisk int    `json:"min_disk"`
}

// Nova flavor metadata for the specified VM.
type NovaFlavor struct {
	Name            string            `json:"name"`
	MemoryMB        int               `json:"memory_mb"`
	VCPUs           int               `json:"vcpus"`
	RootDiskGB      int               `json:"root_gb"`
	EphemeralDiskGB int               `json:"ephemeral_gb"`
	FlavorID        string            `json:"flavorid"`
	Swap            int               `json:"swap"`
	RXTXFactor      float64           `json:"rxtx_factor"`
	VCPUsWeight     float64           `json:"vcpus_weight"`
	ExtraSpecs      map[string]string `json:"extra_specs"`
}

// Host object from the Nova scheduler pipeline.
// See: https://github.com/sapcc/nova/blob/stable/xena-m3/nova/scheduler/host_manager.py class HostState
type NovaExternalSchedulerRequestHost struct {
	// Name of the Nova compute host, e.g. nova-compute-bb123.
	ComputeHost string `json:"host"`
	// Name of the hypervisor hostname, e.g. domain-c123.<uuid>
	HypervisorHostname string `json:"hypervisor_hostname"`
}

func (h *NovaExternalSchedulerRequestHost) GetComputeHost() string {
	return h.ComputeHost
}
func (h *NovaExternalSchedulerRequestHost) GetHypervisorHostname() string {
	return h.HypervisorHostname
}

// Request generated by the Nova scheduler when calling cortex.
// The request contains a spec of the VM to be scheduled, a list of hosts and
// their status, and a map of weights that were calculated by the Nova weigher
// pipeline. Some additional flags are also included.
type NovaExternalSchedulerRequest struct {
	Spec NovaObject[NovaSpec] `json:"spec"`

	// Whether the Nova scheduling request is a rebuild request.
	Rebuild bool `json:"rebuild"`
	// Whether the Nova scheduling request is a resize request.
	Resize bool `json:"resize"`
	// Whether the Nova scheduling request is a live migration.
	Live bool `json:"live"`
	// Whether the affected VM is a VMware VM.
	VMware bool `json:"vmware"`

	Hosts   []NovaExternalSchedulerRequestHost `json:"hosts"`
	Weights map[string]float64                 `json:"weights"`
}

func (r *NovaExternalSchedulerRequest) GetProjectID() string {
	return r.Spec.Data.ProjectID
}
func (r *NovaExternalSchedulerRequest) GetFlavorID() string {
	return r.Spec.Data.Flavor.Data.FlavorID
}
func (r *NovaExternalSchedulerRequest) GetRebuild() bool {
	return r.Rebuild
}
func (r *NovaExternalSchedulerRequest) GetResize() bool {
	return r.Resize
}
func (r *NovaExternalSchedulerRequest) GetLive() bool {
	return r.Live
}
func (r *NovaExternalSchedulerRequest) GetVMware() bool {
	return r.VMware
}
func (r *NovaExternalSchedulerRequest) GetHosts() []plugins.ScenarioHost {
	hosts := make([]plugins.ScenarioHost, len(r.Hosts))
	for i, host := range r.Hosts {
		hosts[i] = plugins.ScenarioHost(&host)
	}
	return hosts
}
func (r *NovaExternalSchedulerRequest) GetNumVMs() int {
	return r.Spec.Data.NInstances
}

// Response generated by cortex for the Nova scheduler.
// Cortex returns an ordered list of hosts that the VM should be scheduled on.
type NovaExternalSchedulerResponse struct {
	Hosts []string `json:"hosts"`
}
