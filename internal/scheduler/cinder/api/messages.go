// Copyright 2025 SAP SE
// SPDX-License-Identifier: Apache-2.0

package api

import (
	"log/slog"

	"github.com/cobaltcore-dev/cortex/internal/scheduler"
)

// Host object from the Cinder scheduler pipeline.
type ExternalSchedulerHost struct {
	// Name of the Cinder share host.
	VolumeHost string `json:"host"`
}

// Request generated by the Cinder scheduler when calling cortex.
// The request contains a spec of the share to be scheduled, a list of hosts and
// their status, and a map of weights that were calculated by the Cinder weigher
// pipeline. Some additional flags are also included.
type ExternalSchedulerRequest struct {
	// TODO: Use a more specific type for the spec.
	Spec any `json:"spec"`
	// Request context from Cinder that contains additional meta information.
	Context CinderRequestContext `json:"context"`
	// The share hosts that are available for scheduling.
	Hosts []ExternalSchedulerHost `json:"hosts"`
	// Weights map of share hosts to their weights calculated by the Cinder weigher pipeline.
	Weights map[string]float64 `json:"weights"`

	// Whether the request is a sandboxed request. By default, this is false.
	//
	// Sandboxed requests can be used to notify cortex that the resource is not
	// actually being scheduled, and that sandboxed scheduler steps should be
	// executed for additional validation.
	Sandboxed bool `json:"sandboxed"`
}

// Conform to the PipelineRequest interface.

func (r ExternalSchedulerRequest) GetSubjects() []string {
	hosts := make([]string, len(r.Hosts))
	for i, host := range r.Hosts {
		hosts[i] = host.VolumeHost
	}
	return hosts
}
func (r ExternalSchedulerRequest) GetWeights() map[string]float64 {
	return r.Weights
}
func (r ExternalSchedulerRequest) GetTraceLogArgs() []slog.Attr {
	return []slog.Attr{
		slog.String("greq", r.Context.GlobalRequestID),
		slog.String("req", r.Context.RequestID),
		slog.String("user", r.Context.UserID),
		slog.String("project", r.Context.ProjectID),
	}
}
func (r ExternalSchedulerRequest) IsSandboxed() bool {
	return r.Sandboxed
}
func (r ExternalSchedulerRequest) WithSandboxed(sandboxed bool) scheduler.PipelineRequest {
	r.Sandboxed = sandboxed
	return r
}

// Response generated by cortex for the Cinder scheduler.
// Cortex returns an ordered list of hosts that the share should be scheduled on.
type ExternalSchedulerResponse struct {
	Hosts []string `json:"hosts"`
}

// TODO add specs
type CinderRequestContext struct {
	// Fields added by oslo.context

	UserID          string   `json:"user"`
	ProjectID       string   `json:"project_id"`
	SystemScope     string   `json:"system_scope"`
	DomainID        string   `json:"domain"`
	UserDomainID    string   `json:"user_domain"`
	ProjectDomainID string   `json:"project_domain"`
	IsAdmin         bool     `json:"is_admin"`
	ReadOnly        bool     `json:"read_only"`
	ShowDeleted     bool     `json:"show_deleted"`
	RequestID       string   `json:"request_id"`
	GlobalRequestID string   `json:"global_request_id"`
	ResourceUUID    string   `json:"resource_uuid"`
	Roles           []string `json:"roles"`
	UserIdentity    string   `json:"user_identity"`
	IsAdminProject  bool     `json:"is_admin_project"`

	// Fields added by the Cinder scheduler

	RemoteAddress string  `json:"remote_address"`
	Timestamp     string  `json:"timestamp"`
	QuotaClass    *string `json:"quota_class"`
	ProjectName   string  `json:"project_name"`
}
