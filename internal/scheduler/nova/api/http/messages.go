// Copyright 2025 SAP SE
// SPDX-License-Identifier: Apache-2.0

package http

import "github.com/cobaltcore-dev/cortex/internal/scheduler/nova/api"

// Host object from the Nova scheduler pipeline.
// See: https://github.com/sapcc/nova/blob/stable/xena-m3/nova/scheduler/host_manager.py class HostState
type ExternalSchedulerHost struct {
	// Name of the Nova compute host, e.g. nova-compute-bb123.
	ComputeHost string `json:"host"`
	// Name of the hypervisor hostname, e.g. domain-c123.<uuid>
	HypervisorHostname string `json:"hypervisor_hostname"`
}

// Request generated by the Nova scheduler when calling cortex.
// The request contains a spec of the VM to be scheduled, a list of hosts and
// their status, and a map of weights that were calculated by the Nova weigher
// pipeline. Some additional flags are also included.
type ExternalSchedulerRequest struct {
	Spec api.NovaObject[api.NovaSpec] `json:"spec"`

	// Request context from Nova that contains additional meta information.
	Context api.NovaRequestContext `json:"context"`

	// Whether the Nova scheduling request is a rebuild request.
	Rebuild bool `json:"rebuild"`
	// Whether the Nova scheduling request is a resize request.
	Resize bool `json:"resize"`
	// Whether the Nova scheduling request is a live migration.
	Live bool `json:"live"`
	// Whether the affected VM is a VMware VM.
	VMware bool `json:"vmware"`

	Hosts   []ExternalSchedulerHost `json:"hosts"`
	Weights map[string]float64      `json:"weights"`
}

// Conform to the Request interface.

func (r *ExternalSchedulerRequest) GetSpec() api.NovaObject[api.NovaSpec] {
	return r.Spec
}
func (r *ExternalSchedulerRequest) GetContext() api.NovaRequestContext {
	return r.Context
}
func (r *ExternalSchedulerRequest) GetRebuild() bool {
	return r.Rebuild
}
func (r *ExternalSchedulerRequest) GetResize() bool {
	return r.Resize
}
func (r *ExternalSchedulerRequest) GetLive() bool {
	return r.Live
}
func (r *ExternalSchedulerRequest) GetVMware() bool {
	return r.VMware
}
func (r *ExternalSchedulerRequest) GetHosts() []string {
	hosts := make([]string, len(r.Hosts))
	for i, host := range r.Hosts {
		hosts[i] = host.ComputeHost
	}
	return hosts
}
func (r *ExternalSchedulerRequest) GetWeights() map[string]float64 {
	return r.Weights
}

// Response generated by cortex for the Nova scheduler.
// Cortex returns an ordered list of hosts that the VM should be scheduled on.
type ExternalSchedulerResponse struct {
	Hosts []string `json:"hosts"`
}
