//go:build !ignore_autogenerated

// Copyright 2025 SAP SE
// SPDX-License-Identifier: Apache-2.0

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CinderDecision) DeepCopyInto(out *CinderDecision) {
	*out = *in
	if in.StoragePools != nil {
		in, out := &in.StoragePools, &out.StoragePools
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.StepResults != nil {
		in, out := &in.StepResults, &out.StepResults
		*out = make([]StepResult, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CinderDecision.
func (in *CinderDecision) DeepCopy() *CinderDecision {
	if in == nil {
		return nil
	}
	out := new(CinderDecision)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Decision) DeepCopyInto(out *Decision) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Decision.
func (in *Decision) DeepCopy() *Decision {
	if in == nil {
		return nil
	}
	out := new(Decision)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Decision) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DecisionList) DeepCopyInto(out *DecisionList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Decision, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DecisionList.
func (in *DecisionList) DeepCopy() *DecisionList {
	if in == nil {
		return nil
	}
	out := new(DecisionList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *DecisionList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DecisionSpec) DeepCopyInto(out *DecisionSpec) {
	*out = *in
	out.PipelineRef = in.PipelineRef
	if in.NovaRaw != nil {
		in, out := &in.NovaRaw, &out.NovaRaw
		*out = new(runtime.RawExtension)
		(*in).DeepCopyInto(*out)
	}
	if in.CinderRaw != nil {
		in, out := &in.CinderRaw, &out.CinderRaw
		*out = new(runtime.RawExtension)
		(*in).DeepCopyInto(*out)
	}
	if in.ManilaRaw != nil {
		in, out := &in.ManilaRaw, &out.ManilaRaw
		*out = new(runtime.RawExtension)
		(*in).DeepCopyInto(*out)
	}
	if in.MachineRef != nil {
		in, out := &in.MachineRef, &out.MachineRef
		*out = new(v1.ObjectReference)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DecisionSpec.
func (in *DecisionSpec) DeepCopy() *DecisionSpec {
	if in == nil {
		return nil
	}
	out := new(DecisionSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DecisionStatus) DeepCopyInto(out *DecisionStatus) {
	*out = *in
	out.Took = in.Took
	if in.Nova != nil {
		in, out := &in.Nova, &out.Nova
		*out = new(NovaDecision)
		(*in).DeepCopyInto(*out)
	}
	if in.Cinder != nil {
		in, out := &in.Cinder, &out.Cinder
		*out = new(CinderDecision)
		(*in).DeepCopyInto(*out)
	}
	if in.Manila != nil {
		in, out := &in.Manila, &out.Manila
		*out = new(ManilaDecision)
		(*in).DeepCopyInto(*out)
	}
	if in.Machine != nil {
		in, out := &in.Machine, &out.Machine
		*out = new(MachineDecision)
		(*in).DeepCopyInto(*out)
	}
	if in.History != nil {
		in, out := &in.History, &out.History
		*out = make([]v1.ObjectReference, len(*in))
		copy(*out, *in)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DecisionStatus.
func (in *DecisionStatus) DeepCopy() *DecisionStatus {
	if in == nil {
		return nil
	}
	out := new(DecisionStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Descheduling) DeepCopyInto(out *Descheduling) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	out.Spec = in.Spec
	out.Status = in.Status
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Descheduling.
func (in *Descheduling) DeepCopy() *Descheduling {
	if in == nil {
		return nil
	}
	out := new(Descheduling)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Descheduling) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DeschedulingList) DeepCopyInto(out *DeschedulingList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Descheduling, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DeschedulingList.
func (in *DeschedulingList) DeepCopy() *DeschedulingList {
	if in == nil {
		return nil
	}
	out := new(DeschedulingList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *DeschedulingList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DeschedulingSpec) DeepCopyInto(out *DeschedulingSpec) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DeschedulingSpec.
func (in *DeschedulingSpec) DeepCopy() *DeschedulingSpec {
	if in == nil {
		return nil
	}
	out := new(DeschedulingSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DeschedulingStatus) DeepCopyInto(out *DeschedulingStatus) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DeschedulingStatus.
func (in *DeschedulingStatus) DeepCopy() *DeschedulingStatus {
	if in == nil {
		return nil
	}
	out := new(DeschedulingStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MachineDecision) DeepCopyInto(out *MachineDecision) {
	*out = *in
	if in.MachinePools != nil {
		in, out := &in.MachinePools, &out.MachinePools
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.StepResults != nil {
		in, out := &in.StepResults, &out.StepResults
		*out = make([]StepResult, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MachineDecision.
func (in *MachineDecision) DeepCopy() *MachineDecision {
	if in == nil {
		return nil
	}
	out := new(MachineDecision)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManilaDecision) DeepCopyInto(out *ManilaDecision) {
	*out = *in
	if in.StoragePools != nil {
		in, out := &in.StoragePools, &out.StoragePools
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.StepResults != nil {
		in, out := &in.StepResults, &out.StepResults
		*out = make([]StepResult, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManilaDecision.
func (in *ManilaDecision) DeepCopy() *ManilaDecision {
	if in == nil {
		return nil
	}
	out := new(ManilaDecision)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NovaDecision) DeepCopyInto(out *NovaDecision) {
	*out = *in
	if in.ComputeHosts != nil {
		in, out := &in.ComputeHosts, &out.ComputeHosts
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.Activations != nil {
		in, out := &in.Activations, &out.Activations
		*out = make(map[string]float64, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NovaDecision.
func (in *NovaDecision) DeepCopy() *NovaDecision {
	if in == nil {
		return nil
	}
	out := new(NovaDecision)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StepResult) DeepCopyInto(out *StepResult) {
	*out = *in
	if in.Activations != nil {
		in, out := &in.Activations, &out.Activations
		*out = make(map[string]float64, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StepResult.
func (in *StepResult) DeepCopy() *StepResult {
	if in == nil {
		return nil
	}
	out := new(StepResult)
	in.DeepCopyInto(out)
	return out
}
